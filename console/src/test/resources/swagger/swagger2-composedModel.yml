swagger: '2.0'
info:
  description: '一体化标准服务端的文档. 文档1'
  version: '1.0'
  title: 测试项目
host: 'localhost:8010'
basePath: /
tags:
  - {name: basic-error-controller, description: 'Basic Error Controller'}
  - {name: test-controller, description: 'Test Controller'}
paths:
  /allOf: {post: {tags: [test-controller], summary: allOf, operationId: allOfUsingPOST, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: animals, description: animals, required: true, schema: {originalRef: Animal, $ref: '#/definitions/Animal'}}], responses: {'200': {description: OK, schema: {originalRef: Dog, $ref: '#/definitions/Dog'}, x-returnInfo: 添加后的人员id}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}}
  /allType: {get: {tags: [test-controller], summary: allType, operationId: allTypeUsingGET, produces: ['*/*'], parameters: [{in: body, name: allTypeEntity, description: allTypeEntity, required: true, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}], responses: {'200': {description: OK, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, head: {tags: [test-controller], summary: allType, operationId: allTypeUsingHEAD, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: allTypeEntity, description: allTypeEntity, required: true, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}], responses: {'200': {description: OK, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}, post: {tags: [test-controller], summary: allType, operationId: allTypeUsingPOST, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: allTypeEntity, description: allTypeEntity, required: true, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}], responses: {'200': {description: OK, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, put: {tags: [test-controller], summary: allType, operationId: allTypeUsingPUT, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: allTypeEntity, description: allTypeEntity, required: true, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}], responses: {'200': {description: OK, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, delete: {tags: [test-controller], summary: allType, operationId: allTypeUsingDELETE, produces: ['*/*'], parameters: [{in: body, name: allTypeEntity, description: allTypeEntity, required: true, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}], responses: {'200': {description: OK, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}, options: {tags: [test-controller], summary: allType, operationId: allTypeUsingOPTIONS, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: allTypeEntity, description: allTypeEntity, required: true, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}], responses: {'200': {description: OK, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}, patch: {tags: [test-controller], summary: allType, operationId: allTypeUsingPATCH, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: allTypeEntity, description: allTypeEntity, required: true, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}], responses: {'200': {description: OK, schema: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}}
  /complexQuery: {get: {tags: [test-controller], summary: complexQuery, operationId: complexQueryUsingGET, produces: ['*/*'], parameters: [{name: 'list[0].name', in: query, required: false, type: string}, {name: 'list[0].sid', in: query, required: false, type: integer, format: int64}, {name: map, in: query, required: false, type: object}, {name: pageNo, in: query, required: false, type: integer, format: int64}, {name: pageSize, in: query, required: false, type: integer, format: int64}, {name: person.name, in: query, required: false, type: string}, {name: person.sid, in: query, required: false, type: integer, format: int64}], responses: {'200': {description: OK, schema: {type: string}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, post: {tags: [test-controller], summary: complexQuery, operationId: complexQueryUsingPOST, consumes: [application/json], produces: ['*/*'], parameters: [{name: 'list[0].name', in: query, required: false, type: string}, {name: 'list[0].sid', in: query, required: false, type: integer, format: int64}, {name: map, in: query, required: false, type: object}, {name: pageNo, in: query, required: false, type: integer, format: int64}, {name: pageSize, in: query, required: false, type: integer, format: int64}, {name: person.name, in: query, required: false, type: string}, {name: person.sid, in: query, required: false, type: integer, format: int64}], responses: {'200': {description: OK, schema: {type: string}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}}
  /error: {get: {tags: [basic-error-controller], summary: error, operationId: errorUsingGET, produces: ['*/*'], responses: {'200': {description: OK, schema: {type: object, additionalProperties: {type: object}}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, head: {tags: [basic-error-controller], summary: error, operationId: errorUsingHEAD, consumes: [application/json], produces: ['*/*'], responses: {'200': {description: OK, schema: {type: object, additionalProperties: {type: object}}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}, post: {tags: [basic-error-controller], summary: error, operationId: errorUsingPOST, consumes: [application/json], produces: ['*/*'], responses: {'200': {description: OK, schema: {type: object, additionalProperties: {type: object}}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, put: {tags: [basic-error-controller], summary: error, operationId: errorUsingPUT, consumes: [application/json], produces: ['*/*'], responses: {'200': {description: OK, schema: {type: object, additionalProperties: {type: object}}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, delete: {tags: [basic-error-controller], summary: error, operationId: errorUsingDELETE, produces: ['*/*'], responses: {'200': {description: OK, schema: {type: object, additionalProperties: {type: object}}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}, options: {tags: [basic-error-controller], summary: error, operationId: errorUsingOPTIONS, consumes: [application/json], produces: ['*/*'], responses: {'200': {description: OK, schema: {type: object, additionalProperties: {type: object}}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}, patch: {tags: [basic-error-controller], summary: error, operationId: errorUsingPATCH, consumes: [application/json], produces: ['*/*'], responses: {'200': {description: OK, schema: {type: object, additionalProperties: {type: object}}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}}
  /formData: {post: {tags: [test-controller], summary: formData, operationId: formDataUsingPOST, consumes: [application/x-www-form-urlencoded], produces: ['*/*'], parameters: [{name: key, in: formData, description: key, required: false, type: string}, {name: name, in: formData, required: false, type: string}, {name: sid, in: formData, required: false, type: integer, format: int64}], responses: {'200': {description: OK, schema: {type: string}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}}
  /generic: {post: {tags: [test-controller], summary: generic, operationId: genericUsingPOST, consumes: [application/json], produces: ['*/*'], responses: {'200': {description: OK, schema: {originalRef: CommonResult«Person», $ref: '#/definitions/CommonResult«Person»'}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}}
  /implicit: {post: {tags: [test-controller], summary: implicit, operationId: implicitUsingPOST, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: person, description: 角色ID, required: true, schema: {type: string}}, {name: roleId, in: query, description: 角色ID, required: true, type: string}, {name: userId, in: query, description: 用户ID, required: true, type: string}], responses: {'200': {description: OK, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}}
  /mapQuery: {get: {tags: [test-controller], summary: complexQuery, operationId: complexQueryUsingGET_1, produces: ['*/*'], parameters: [{name: modelMap, in: query, description: modelMap, required: false, items: {type: object, additionalProperties: {type: object}}}, {name: query, in: query, description: query, required: false, type: object}], responses: {'200': {description: OK, schema: {type: string}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, post: {tags: [test-controller], summary: complexQuery, operationId: complexQueryUsingPOST_1, consumes: [application/json], produces: ['*/*'], parameters: [{name: modelMap, in: query, description: modelMap, required: false, items: {type: object, additionalProperties: {type: object}}}, {name: query, in: query, description: query, required: false, type: object}], responses: {'200': {description: OK, schema: {type: string}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}}
  '/person/{id1}/{id2}': {get: {tags: [test-controller], summary: 获取全部数据, operationId: allDataUsingGET, produces: ['*/*'], parameters: [{in: body, name: body, description: body, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: body1, description: body1, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: cookie1, description: cookie1, required: false, schema: {type: string}}, {in: body, name: cookie2, description: cookie2, required: false, schema: {type: string}}, {name: id1, in: path, description: id1, required: true, type: string}, {name: id2, in: path, description: id2, required: true, type: string}, {name: name, in: query, required: false, type: string}, {in: body, name: pageNo, description: 分页页码, required: false, schema: {type: string}}, {name: pageSize, in: query, description: pageSize, required: false, type: string}, {name: sid, in: query, required: false, type: integer, format: int64}, {name: token1, in: header, description: token1, required: true, type: string}, {name: token2, in: header, description: token2, required: true, type: string}], responses: {'200': {description: OK, schema: {type: string}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, head: {tags: [test-controller], summary: 获取全部数据, operationId: allDataUsingHEAD, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: body, description: body, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: body1, description: body1, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: cookie1, description: cookie1, required: false, schema: {type: string}}, {in: body, name: cookie2, description: cookie2, required: false, schema: {type: string}}, {name: id1, in: path, description: id1, required: true, type: string}, {name: id2, in: path, description: id2, required: true, type: string}, {name: name, in: query, required: false, type: string}, {in: body, name: pageNo, description: 分页页码, required: false, schema: {type: string}}, {name: pageSize, in: query, description: pageSize, required: false, type: string}, {name: sid, in: query, required: false, type: integer, format: int64}, {name: token1, in: header, description: token1, required: true, type: string}, {name: token2, in: header, description: token2, required: true, type: string}], responses: {'200': {description: OK, schema: {type: string}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}, post: {tags: [test-controller], summary: 获取全部数据, operationId: allDataUsingPOST, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: body, description: body, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: body1, description: body1, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: cookie1, description: cookie1, required: false, schema: {type: string}}, {in: body, name: cookie2, description: cookie2, required: false, schema: {type: string}}, {name: id1, in: path, description: id1, required: true, type: string}, {name: id2, in: path, description: id2, required: true, type: string}, {name: name, in: query, required: false, type: string}, {in: body, name: pageNo, description: 分页页码, required: false, schema: {type: string}}, {name: pageSize, in: query, description: pageSize, required: false, type: string}, {name: sid, in: query, required: false, type: integer, format: int64}, {name: token1, in: header, description: token1, required: true, type: string}, {name: token2, in: header, description: token2, required: true, type: string}], responses: {'200': {description: OK, schema: {type: string}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, put: {tags: [test-controller], summary: 获取全部数据, operationId: allDataUsingPUT, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: body, description: body, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: body1, description: body1, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: cookie1, description: cookie1, required: false, schema: {type: string}}, {in: body, name: cookie2, description: cookie2, required: false, schema: {type: string}}, {name: id1, in: path, description: id1, required: true, type: string}, {name: id2, in: path, description: id2, required: true, type: string}, {name: name, in: query, required: false, type: string}, {in: body, name: pageNo, description: 分页页码, required: false, schema: {type: string}}, {name: pageSize, in: query, description: pageSize, required: false, type: string}, {name: sid, in: query, required: false, type: integer, format: int64}, {name: token1, in: header, description: token1, required: true, type: string}, {name: token2, in: header, description: token2, required: true, type: string}], responses: {'200': {description: OK, schema: {type: string}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, delete: {tags: [test-controller], summary: 获取全部数据, operationId: allDataUsingDELETE, produces: ['*/*'], parameters: [{in: body, name: body, description: body, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: body1, description: body1, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: cookie1, description: cookie1, required: false, schema: {type: string}}, {in: body, name: cookie2, description: cookie2, required: false, schema: {type: string}}, {name: id1, in: path, description: id1, required: true, type: string}, {name: id2, in: path, description: id2, required: true, type: string}, {name: name, in: query, required: false, type: string}, {in: body, name: pageNo, description: 分页页码, required: false, schema: {type: string}}, {name: pageSize, in: query, description: pageSize, required: false, type: string}, {name: sid, in: query, required: false, type: integer, format: int64}, {name: token1, in: header, description: token1, required: true, type: string}, {name: token2, in: header, description: token2, required: true, type: string}], responses: {'200': {description: OK, schema: {type: string}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}, options: {tags: [test-controller], summary: 获取全部数据, operationId: allDataUsingOPTIONS, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: body, description: body, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: body1, description: body1, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: cookie1, description: cookie1, required: false, schema: {type: string}}, {in: body, name: cookie2, description: cookie2, required: false, schema: {type: string}}, {name: id1, in: path, description: id1, required: true, type: string}, {name: id2, in: path, description: id2, required: true, type: string}, {name: name, in: query, required: false, type: string}, {in: body, name: pageNo, description: 分页页码, required: false, schema: {type: string}}, {name: pageSize, in: query, description: pageSize, required: false, type: string}, {name: sid, in: query, required: false, type: integer, format: int64}, {name: token1, in: header, description: token1, required: true, type: string}, {name: token2, in: header, description: token2, required: true, type: string}], responses: {'200': {description: OK, schema: {type: string}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}, patch: {tags: [test-controller], summary: 获取全部数据, operationId: allDataUsingPATCH, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: body, description: body, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: body1, description: body1, required: true, schema: {originalRef: Person, $ref: '#/definitions/Person'}}, {in: body, name: cookie1, description: cookie1, required: false, schema: {type: string}}, {in: body, name: cookie2, description: cookie2, required: false, schema: {type: string}}, {name: id1, in: path, description: id1, required: true, type: string}, {name: id2, in: path, description: id2, required: true, type: string}, {name: name, in: query, required: false, type: string}, {in: body, name: pageNo, description: 分页页码, required: false, schema: {type: string}}, {name: pageSize, in: query, description: pageSize, required: false, type: string}, {name: sid, in: query, required: false, type: integer, format: int64}, {name: token1, in: header, description: token1, required: true, type: string}, {name: token2, in: header, description: token2, required: true, type: string}], responses: {'200': {description: OK, schema: {type: string}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}}
  /query: {get: {tags: [test-controller], summary: query, operationId: queryUsingGET, produces: ['*/*'], parameters: [{name: key, in: query, description: key, required: false, type: string}, {name: name, in: query, required: false, type: string}, {name: sid, in: query, required: false, type: integer, format: int64}], responses: {'200': {description: OK, schema: {type: string}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, post: {tags: [test-controller], summary: query, operationId: queryUsingPOST, consumes: [application/json], produces: ['*/*'], parameters: [{name: key, in: query, description: key, required: false, type: string}, {name: name, in: query, required: false, type: string}, {name: sid, in: query, required: false, type: integer, format: int64}], responses: {'200': {description: OK, schema: {type: string}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}}
  /samePath: {get: {tags: [test-controller], summary: samePathGet, operationId: samePathGetUsingGET, produces: ['*/*'], parameters: [{name: name, in: query, required: false, type: string}, {name: sid, in: query, required: false, type: integer, format: int64}], responses: {'200': {description: OK, schema: {type: string}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, post: {tags: [test-controller], summary: samePathPost, operationId: samePathPostUsingPOST, consumes: [application/json], produces: ['*/*'], parameters: [{name: sid, in: query, description: sid, required: false, type: string}], responses: {'200': {description: OK, schema: {type: string}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}}
  '/sss/**': {get: {tags: [test-controller], summary: execute, operationId: executeUsingGET, produces: ['*/*'], parameters: [{name: header, in: header, description: header, required: true, type: object}, {name: params, in: query, description: params, required: true, type: object}], responses: {'200': {description: OK}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, head: {tags: [test-controller], summary: execute, operationId: executeUsingHEAD, consumes: [application/json], produces: ['*/*'], parameters: [{name: header, in: header, description: header, required: true, type: object}, {name: params, in: query, description: params, required: true, type: object}], responses: {'200': {description: OK}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}, post: {tags: [test-controller], summary: execute, operationId: executeUsingPOST, consumes: [application/json], produces: ['*/*'], parameters: [{name: header, in: header, description: header, required: true, type: object}, {name: params, in: query, description: params, required: true, type: object}], responses: {'200': {description: OK}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, put: {tags: [test-controller], summary: execute, operationId: executeUsingPUT, consumes: [application/json], produces: ['*/*'], parameters: [{name: header, in: header, description: header, required: true, type: object}, {name: params, in: query, description: params, required: true, type: object}], responses: {'200': {description: OK}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}, deprecated: false}, delete: {tags: [test-controller], summary: execute, operationId: executeUsingDELETE, produces: ['*/*'], parameters: [{name: header, in: header, description: header, required: true, type: object}, {name: params, in: query, description: params, required: true, type: object}], responses: {'200': {description: OK}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}, options: {tags: [test-controller], summary: execute, operationId: executeUsingOPTIONS, consumes: [application/json], produces: ['*/*'], parameters: [{name: header, in: header, description: header, required: true, type: object}, {name: params, in: query, description: params, required: true, type: object}], responses: {'200': {description: OK}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}, patch: {tags: [test-controller], summary: execute, operationId: executeUsingPATCH, consumes: [application/json], produces: ['*/*'], parameters: [{name: header, in: header, description: header, required: true, type: object}, {name: params, in: query, description: params, required: true, type: object}], responses: {'200': {description: OK}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}, deprecated: false}}
definitions:
  AllTypeEntity: {type: object, properties: {bigDecimalVar: {type: number}, bigIntegerVar: {type: integer}, booleanVar: {type: boolean}, byteVar: {type: integer, format: int32, minimum: -128, maximum: 127}, bytesVar: {type: string, format: byte}, calendar: {originalRef: Calendar, $ref: '#/definitions/Calendar'}, charArray: {type: array, items: {type: string}}, charVar: {type: string}, child: {originalRef: Child, $ref: '#/definitions/Child'}, childHashMap: {type: object, additionalProperties: {originalRef: Child, $ref: '#/definitions/Child'}}, childList: {type: array, items: {originalRef: Child, $ref: '#/definitions/Child'}}, children: {type: array, items: {originalRef: Child, $ref: '#/definitions/Child'}}, childrenChildren: {type: array, items: {type: array, items: {originalRef: Child, $ref: '#/definitions/Child'}}}, date: {type: string, format: date-time}, doubleVar: {type: number, format: double}, floatVar: {type: number, format: float}, fruit: {type: string, enum: [apple, orange]}, intVar: {type: integer, format: int32}, interfaceTypeEnum: {type: string, enum: [HTTP, WEB_SERVICE, JSF, ORCHESTRATION]}, locale: {originalRef: Locale, $ref: '#/definitions/Locale'}, longVar: {type: integer, format: int64}, shortVar: {type: integer, format: int32}, sqlDate: {type: string, format: date}, strArrArr: {type: array, items: {type: array, items: {type: string}}}, strArray: {type: array, items: {type: string}}, strVar: {type: string}, stringHashMap: {type: object, additionalProperties: {type: string}}, stringList: {type: array, items: {type: string}}, time: {originalRef: Time, $ref: '#/definitions/Time'}, timeZone: {originalRef: TimeZone, $ref: '#/definitions/TimeZone'}, timestamp: {originalRef: Timestamp, $ref: '#/definitions/Timestamp'}, typeChild: {originalRef: AllTypeEntity, $ref: '#/definitions/AllTypeEntity'}, uri: {originalRef: URI, $ref: '#/definitions/URI'}, url: {originalRef: URL, $ref: '#/definitions/URL'}, uuid: {type: string, format: uuid}}, title: AllTypeEntity}
  Animal: {type: object, discriminator: type, properties: {type: {type: string, enum: [CAT, DOG]}}, title: Animal}
  Calendar: {type: object, properties: {calendarType: {type: string}, fieldsComputed: {type: integer, format: int32}, fieldsNormalized: {type: integer, format: int32}, firstDayOfWeek: {type: integer, format: int32}, lenient: {type: boolean}, minimalDaysInFirstWeek: {type: integer, format: int32}, time: {type: string, format: date-time}, timeInMillis: {type: integer, format: int64}, timeZone: {originalRef: TimeZone, $ref: '#/definitions/TimeZone'}, weekCountData: {originalRef: Locale, $ref: '#/definitions/Locale'}, weekDateSupported: {type: boolean}, weekYear: {type: integer, format: int32}, weeksInWeekYear: {type: integer, format: int32}, zoneShared: {type: boolean}}, title: Calendar}
  Character: {type: object, title: Character}
  Child: {type: object, properties: {booleanVar: {type: boolean}, charVar: {type: string}, doubleVar: {type: number, format: double}, floatVar: {type: number, format: float}, intVar: {type: integer, format: int32}, longVar: {type: integer, format: int64}, shortVar: {type: integer, format: int32}, strVar: {type: string}, subChild: {originalRef: SubChild, $ref: '#/definitions/SubChild'}}, title: Child}
  CommonResult«Person»: {type: object, properties: {code: {type: integer, format: int32}, data: {originalRef: Person, $ref: '#/definitions/Person'}, message: {type: string}, traceId: {type: string}}, title: CommonResult«Person»}
  Dog: {title: Dog, properties: {type: {type: string, enum: [CAT, DOG]}}, allOf: [{originalRef: Animal, $ref: '#/definitions/Animal'}, {type: object, properties: {type: {type: string, enum: [CAT, DOG]}}, title: Dog}]}
  Locale: {type: object, properties: {country: {type: string}, displayCountry: {type: string}, displayLanguage: {type: string}, displayName: {type: string}, displayScript: {type: string}, displayVariant: {type: string}, extensionKeys: {type: array, items: {originalRef: Character, $ref: '#/definitions/Character'}}, iso3Country: {type: string}, iso3Language: {type: string}, language: {type: string}, script: {type: string}, unicodeLocaleAttributes: {type: array, items: {type: string}}, unicodeLocaleKeys: {type: array, items: {type: string}}, variant: {type: string}}, title: Locale}
  ModelAndView: {type: object, properties: {empty: {type: boolean}, model: {type: object}, modelMap: {type: object, additionalProperties: {type: object}}, reference: {type: boolean}, status: {type: string, enum: ['100 CONTINUE', '101 SWITCHING_PROTOCOLS', '102 PROCESSING', '103 CHECKPOINT', '200 OK', '201 CREATED', '202 ACCEPTED', '203 NON_AUTHORITATIVE_INFORMATION', '204 NO_CONTENT', '205 RESET_CONTENT', '206 PARTIAL_CONTENT', '207 MULTI_STATUS', '208 ALREADY_REPORTED', '226 IM_USED', '300 MULTIPLE_CHOICES', '301 MOVED_PERMANENTLY', '302 FOUND', '302 MOVED_TEMPORARILY', '303 SEE_OTHER', '304 NOT_MODIFIED', '305 USE_PROXY', '307 TEMPORARY_REDIRECT', '308 PERMANENT_REDIRECT', '400 BAD_REQUEST', '401 UNAUTHORIZED', '402 PAYMENT_REQUIRED', '403 FORBIDDEN', '404 NOT_FOUND', '405 METHOD_NOT_ALLOWED', '406 NOT_ACCEPTABLE', '407 PROXY_AUTHENTICATION_REQUIRED', '408 REQUEST_TIMEOUT', '409 CONFLICT', '410 GONE', '411 LENGTH_REQUIRED', '412 PRECONDITION_FAILED', '413 PAYLOAD_TOO_LARGE', '413 REQUEST_ENTITY_TOO_LARGE', '414 URI_TOO_LONG', '414 REQUEST_URI_TOO_LONG', '415 UNSUPPORTED_MEDIA_TYPE', '416 REQUESTED_RANGE_NOT_SATISFIABLE', '417 EXPECTATION_FAILED', '418 I_AM_A_TEAPOT', '419 INSUFFICIENT_SPACE_ON_RESOURCE', '420 METHOD_FAILURE', '421 DESTINATION_LOCKED', '422 UNPROCESSABLE_ENTITY', '423 LOCKED', '424 FAILED_DEPENDENCY', '425 TOO_EARLY', '426 UPGRADE_REQUIRED', '428 PRECONDITION_REQUIRED', '429 TOO_MANY_REQUESTS', '431 REQUEST_HEADER_FIELDS_TOO_LARGE', '451 UNAVAILABLE_FOR_LEGAL_REASONS', '500 INTERNAL_SERVER_ERROR', '501 NOT_IMPLEMENTED', '502 BAD_GATEWAY', '503 SERVICE_UNAVAILABLE', '504 GATEWAY_TIMEOUT', '505 HTTP_VERSION_NOT_SUPPORTED', '506 VARIANT_ALSO_NEGOTIATES', '507 INSUFFICIENT_STORAGE', '508 LOOP_DETECTED', '509 BANDWIDTH_LIMIT_EXCEEDED', '510 NOT_EXTENDED', '511 NETWORK_AUTHENTICATION_REQUIRED']}, view: {originalRef: View, $ref: '#/definitions/View'}, viewName: {type: string}}, title: ModelAndView}
  Person: {type: object, properties: {name: {type: string}, sid: {type: integer, format: int64}}, title: Person}
  SubChild: {type: object, properties: {intVar: {type: integer, format: int32}}, title: SubChild}
  Time: {type: object, properties: {date: {type: integer, format: int32}, day: {type: integer, format: int32}, hours: {type: integer, format: int32}, minutes: {type: integer, format: int32}, month: {type: integer, format: int32}, seconds: {type: integer, format: int32}, time: {type: integer, format: int64}, timezoneOffset: {type: integer, format: int32}, year: {type: integer, format: int32}}, title: Time}
  TimeZone: {type: object, properties: {displayName: {type: string}, dstsavings: {type: integer, format: int32}, id: {type: string}, rawOffset: {type: integer, format: int32}}, title: TimeZone}
  Timestamp: {type: object, properties: {date: {type: integer, format: int32}, day: {type: integer, format: int32}, hours: {type: integer, format: int32}, minutes: {type: integer, format: int32}, month: {type: integer, format: int32}, nanos: {type: integer, format: int32}, seconds: {type: integer, format: int32}, time: {type: integer, format: int64}, timezoneOffset: {type: integer, format: int32}, year: {type: integer, format: int32}}, title: Timestamp}
  URI: {type: object, properties: {absolute: {type: boolean}, authority: {type: string}, fragment: {type: string}, host: {type: string}, opaque: {type: boolean}, path: {type: string}, port: {type: integer, format: int32}, query: {type: string}, rawAuthority: {type: string}, rawFragment: {type: string}, rawPath: {type: string}, rawQuery: {type: string}, rawSchemeSpecificPart: {type: string}, rawUserInfo: {type: string}, scheme: {type: string}, schemeSpecificPart: {type: string}, userInfo: {type: string}}, title: URI}
  URL: {type: object, properties: {authority: {type: string}, content: {type: object}, defaultPort: {type: integer, format: int32}, deserializedFields: {originalRef: URLStreamHandler, $ref: '#/definitions/URLStreamHandler'}, file: {type: string}, host: {type: string}, path: {type: string}, port: {type: integer, format: int32}, protocol: {type: string}, query: {type: string}, ref: {type: string}, serializedHashCode: {type: integer, format: int32}, userInfo: {type: string}}, title: URL}
  URLStreamHandler: {type: object, title: URLStreamHandler}
  View: {type: object, properties: {contentType: {type: string}}, title: View}
